# Myomyw中间层协议

Myomyw的数据包采用json格式发送，每个json的具体格式如下，每次传输分成header与body两个部分
## 注意：文中所有十六进制在实际传输中请用十进制

## header部分

| 参数名        | 描述                    | 类型     |
| ---------- | --------------------- | ------ |
| action     | 表示数据包的类型              | string |
| ref        | session id            | int    |
| error_code | 错误代码（错误码对照表位于body描述中） | int    |



## body部分

## 计算rating

#### Request
action为calc_rating
|  参数名  |            描述             |   类型   |
| :---: | :-----------------------: | :----: |
| uuid1 |         一个玩家的uuid         | string |
| uuid2 |        另一个玩家的uuid         | string |
|  win  | 那个玩家胜利1为player1,2为player2 |  int   |

##### example

```json
{
  	"action" : "calc_rating",
  	"ref" : "233",
  	"error_code" : 0x00
}
{
  	"uuid1" : "..." ,
  	"uuid2" : "...",
  	"win" : 1
}
```

#### Response

action为calc_rating

| error_code | 描述    |
| ---------- | ----- |
| 0x00       | 成功    |
| 0x01       | 找不到玩家 |
| 0xff       | UKE   |

##### example

```json
{
  	"action" : "calc_rating",
  	"ref" : 233,
	"error_code" : 0x00
}
```





## 获取玩家信息

#### Request 

action为qurry

| 参数名  |   描述   |   类型   |
| :--: | :----: | :----: |
| uuid | 玩家UUID | string |
##### example 
```json
{
  	"action" : "qurry",
  	"ref" : "233",
  	"error_code" : 0x00
}
{
	"uuid" : "..."
}
```

#### Response

action为qurry

|   参数名    |  描述   |   类型   |
| :------: | :---: | :----: |
| username | 用户名字  | string |
|  rating  | 用户等级分 |  int   |
|  email   | 用户邮箱  | string |

| error_code |  描述  |
| :--------: | :--: |
|    0x00    |  成功  |
|    0x11    | 查无此人 |

##### example
```json
{
	"action" : "login" ,
    "ref" : 233,
    "error_code" : 0x00
}
{
	"username" :"ranwen"
  	"rating" : 2333,
 	"email" : "233@233.com"
}
```

---

## 发送邮件

#### Request

action为send_email

|  参数名  |  描述  |   类型   |
| :---: | :--: | :----: |
| email | 邮箱地址 | string |
| text  | 发送信息 | string |

##### example
```json
{
  	"action" :"send_email",
  	"ref" :233,
  	"error_code" :0x00
}
{
	"email" : "233@233.com",
	"text" :"233"
}
```
##### Response

action为send_email

| error_code |  描述  |
| :--------: | :--: |
|    0x00    | 成功发送 |
|    0xff    | UKE  |

##### example

```json
{
  	"action" : "send_email",
  	"ref" : 233,
 	"error_code" : 0x00
}
```

---

## 绑定邮箱

### request

action为bind_email

|  参数名  |  描述   |   类型   |
| :---: | :---: | :----: |
| uuid  | uuid  | string |
| email | email | string |


##### example

```json
{
 	"action" : "bind_email",
    "ref" : 233,
    "error_code" : 0x00
}
{
  	"uuid" : "...",
  	"email" : "..."
}
```

#### Response

action为bind_email
| error_code |  描述  |
| :--------: | :--: |
|    0x00    | 成功绑定 |
|    0x21    | 查无此人 |
|    0xff    | UKE  |

##### example

```json
{
  	"action" : "bind_email",
  	"ref" : 233,
  	"error_code" : 0x00
}
{
  	"uuid" : "651a4613-ad1c-405d-a255-df89dcd3a59c" ,
}
```

## 添加用户

#### Request

action为add_user

|   参数名    |   描述    |   类型   |
| :------: | :-----: | :----: |
|   uuid   | 用户的uuid | string |
| username |  用户名字   | string |

##### example

```json
{
	"action" : "add_user",
    "ref" : 233,
    "error_code" : 0x00
}
{
 	"uuid" : "..." ,
  	"username" : "233"
}
```

#### Response

action为add_user


| error_code |   描述   |
| :--------: | :----: |
|    0x00    |   成功   |
|    0x31    | 用户名已使用 |
|    0xff    |  UKE   |

##### example

```json
{
  	"action" : "add_user",
  	"ref" : 233,
  	"error_code" : 0x00
}
```


## 删除用户

#### Request

action为del_user

| 参数名  |   描述    |   类型   |
| :--: | :-----: | :----: |
| uuid | 用户的uuid | string |

##### example

```json
{
  	"action" : "del_user",
  	"ref" : 233,
  	"error_code" : 0x00
}
{
  	"uuid" : "..." ,
}
```



#### Response（对房间内所有人广播）

action为del_user

| error_code |  描述  |
| :--------: | :--: |
|    0x00    |  成功  |
|    0x31    | 查无此人 |
|    0xff    | UKE  |

##### example

```json
{
  	"action" : "del_user",
  	"ref" : 233,
  	"error_code" :0x00
}
```
